require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/posts", type: :request do
  let(:user) { User.create!(name: "john doe", email: 'test@example.com', password: 'pAssword123#', password_confirmation: 'pAssword123#') }

  let(:valid_attributes) {
    { title: "Ha Ling Peak", body: "Best Trail in Canmore", user_id:  user.id }
  }

  let(:invalid_attributes) {
    { body: "Best Trail in Canmore" }
  }

  describe "GET /index" do
    it "renders an successful response if not logged in" do
      Post.create! valid_attributes
      get posts_url
      expect(response).to_not be_successful
    end

    it "renders a successful response" do
      sign_in(user)
      Post.create! valid_attributes
      get posts_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders an unsuccessful response if not logged in" do
      post = Post.create! valid_attributes
      get post_url(post)
      expect(response).to_not be_successful
    end

    it "renders a successful response" do
      sign_in(user)
      post = Post.create! valid_attributes
      get post_url(post)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders an unsuccessful response if not logged in" do
      get new_post_url
      expect(response).to_not be_successful
    end

    it "renders a successful response" do
      sign_in(user)
      get new_post_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders an unsuccessful response if not logged in" do
      post = Post.create! valid_attributes
      get edit_post_url(post)
      expect(response.body).to_not include("Ha Ling Peak")
    end

    it "renders a successful response" do
      sign_in(user)
      post = Post.create! valid_attributes
      get edit_post_url(post)
      expect(response.body).to include("Ha Ling Peak")
    end
  end


  describe "POST /create" do
    context "with valid parameters" do
      it "does not create a new Post if not signed in" do
        expect {
          post posts_url, params: { post: valid_attributes }
        }.to change(Post, :count).by(0)
      end

      it "creates a new Post" do
        sign_in(user)
        expect {
                 post posts_url, params: { post: valid_attributes }
               }.to change(Post, :count).by(1)
      end
      it "redirects to the created post" do
        sign_in(user)
        post posts_url, params: { post: valid_attributes }
        expect(response).to redirect_to(posts_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Post" do
        sign_in(user)
        expect {
          post posts_url, params: { post: invalid_attributes }
        }.to change(Post, :count).by(0)
      end

      it "renders an unsuccessful response" do
        sign_in(user)
        post posts_url, params: { post: invalid_attributes }
        expect(response).to_not be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { title: "East End of Rundle", body: "Second best Trail in Canmore", user_id:  user.id }
      }

      it "does not update the requested post if not logged in" do
        post = Post.create! valid_attributes
        patch post_url(post), params: { post: new_attributes }
        post.reload
        expect(post.title).to_not eq("East End of Rundle")
        expect(post.body).to_not eq("Second best Trail in Canmore")
      end

      it "updates the requested post" do
        sign_in(user)
        post = Post.create! valid_attributes
        patch post_url(post), params: { post: new_attributes }
        post.reload
        expect(post.title).to eq("East End of Rundle")
        expect(post.body).to eq("Second best Trail in Canmore")
      end

      it "redirects to the post" do
        sign_in(user)
        post = Post.create! valid_attributes
        patch post_url(post), params: { post: new_attributes }
        post.reload
        expect(response).to redirect_to(posts_url)
      end
    end

    context "with invalid parameters" do
      it "renders an unsuccessful response" do
        sign_in(user)
        post = Post.create! valid_attributes
        patch post_url(post), params: { post: invalid_attributes }
        expect(response).to_not be_successful
      end
    end
  end

  describe "DELETE /destroy" do

    it "does not destroy the requested post if not signed in" do
      post = Post.create! valid_attributes
      expect {
        delete post_url(post)
      }.to change(Post, :count).by(0)
    end

    it "destroys the requested post" do
      sign_in(user)
      post = Post.create! valid_attributes
      expect {
        delete post_url(post)
      }.to change(Post, :count).by(-1)
    end

    it "redirects to the posts list" do
      sign_in(user)
      post = Post.create! valid_attributes
      delete post_url(post)
      expect(response).to redirect_to(posts_url)
    end
  end
end
